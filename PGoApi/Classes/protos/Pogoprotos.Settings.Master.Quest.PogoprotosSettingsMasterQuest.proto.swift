// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Settings.Master.Quest.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public func == (lhs: Pogoprotos.Settings.Master.Quest.DailyQuestSettings, rhs: Pogoprotos.Settings.Master.Quest.DailyQuestSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBucketsPerDay == rhs.hasBucketsPerDay) && (!lhs.hasBucketsPerDay || lhs.bucketsPerDay == rhs.bucketsPerDay)
  fieldCheck = fieldCheck && (lhs.hasStreakLength == rhs.hasStreakLength) && (!lhs.hasStreakLength || lhs.streakLength == rhs.streakLength)
  fieldCheck = fieldCheck && (lhs.hasBonusMultiplier == rhs.hasBonusMultiplier) && (!lhs.hasBonusMultiplier || lhs.bonusMultiplier == rhs.bonusMultiplier)
  fieldCheck = fieldCheck && (lhs.hasStreakBonusMultiplier == rhs.hasStreakBonusMultiplier) && (!lhs.hasStreakBonusMultiplier || lhs.streakBonusMultiplier == rhs.streakBonusMultiplier)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master.Quest {
  public struct PogoprotosSettingsMasterQuestRoot {
    public static var sharedInstance : PogoprotosSettingsMasterQuestRoot {
     struct Static {
         static let instance : PogoprotosSettingsMasterQuestRoot = PogoprotosSettingsMasterQuestRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class DailyQuestSettings : GeneratedMessage {
    public fileprivate(set) var bucketsPerDay:Int32 = Int32(0)
    public fileprivate(set) var hasBucketsPerDay:Bool = false

    public fileprivate(set) var streakLength:Int32 = Int32(0)
    public fileprivate(set) var hasStreakLength:Bool = false

    public fileprivate(set) var bonusMultiplier:Float = Float(0)
    public fileprivate(set) var hasBonusMultiplier:Bool = false

    public fileprivate(set) var streakBonusMultiplier:Float = Float(0)
    public fileprivate(set) var hasStreakBonusMultiplier:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasBucketsPerDay {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:bucketsPerDay)
      }
      if hasStreakLength {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:streakLength)
      }
      if hasBonusMultiplier {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:bonusMultiplier)
      }
      if hasStreakBonusMultiplier {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:streakBonusMultiplier)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBucketsPerDay {
        serialize_size += bucketsPerDay.computeInt32Size(fieldNumber: 1)
      }
      if hasStreakLength {
        serialize_size += streakLength.computeInt32Size(fieldNumber: 2)
      }
      if hasBonusMultiplier {
        serialize_size += bonusMultiplier.computeFloatSize(fieldNumber: 3)
      }
      if hasStreakBonusMultiplier {
        serialize_size += streakBonusMultiplier.computeFloatSize(fieldNumber: 4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
      return Pogoprotos.Settings.Master.Quest.DailyQuestSettings.classBuilder() as! Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
      return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Quest.DailyQuestSettings) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
      return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasBucketsPerDay {
        jsonMap["bucketsPerDay"] = NSNumber(value:bucketsPerDay)
      }
      if hasStreakLength {
        jsonMap["streakLength"] = NSNumber(value:streakLength)
      }
      if hasBonusMultiplier {
        jsonMap["bonusMultiplier"] = NSNumber(value:bonusMultiplier)
      }
      if hasStreakBonusMultiplier {
        jsonMap["streakBonusMultiplier"] = NSNumber(value:streakBonusMultiplier)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
      return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
      return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasBucketsPerDay {
        output += "\(indent) bucketsPerDay: \(bucketsPerDay) \n"
      }
      if hasStreakLength {
        output += "\(indent) streakLength: \(streakLength) \n"
      }
      if hasBonusMultiplier {
        output += "\(indent) bonusMultiplier: \(bonusMultiplier) \n"
      }
      if hasStreakBonusMultiplier {
        output += "\(indent) streakBonusMultiplier: \(streakBonusMultiplier) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBucketsPerDay {
               hashCode = (hashCode &* 31) &+ bucketsPerDay.hashValue
            }
            if hasStreakLength {
               hashCode = (hashCode &* 31) &+ streakLength.hashValue
            }
            if hasBonusMultiplier {
               hashCode = (hashCode &* 31) &+ bonusMultiplier.hashValue
            }
            if hasStreakBonusMultiplier {
               hashCode = (hashCode &* 31) &+ streakBonusMultiplier.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Quest.DailyQuestSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Quest.DailyQuestSettings"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.Quest.DailyQuestSettings = Pogoprotos.Settings.Master.Quest.DailyQuestSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasBucketsPerDay:Bool {
           get {
                return builderResult.hasBucketsPerDay
           }
      }
      public var bucketsPerDay:Int32 {
           get {
                return builderResult.bucketsPerDay
           }
           set (value) {
               builderResult.hasBucketsPerDay = true
               builderResult.bucketsPerDay = value
           }
      }
      public func setBucketsPerDay(_ value:Int32) -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        self.bucketsPerDay = value
        return self
      }
      public func clearBucketsPerDay() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder{
           builderResult.hasBucketsPerDay = false
           builderResult.bucketsPerDay = Int32(0)
           return self
      }
      public var hasStreakLength:Bool {
           get {
                return builderResult.hasStreakLength
           }
      }
      public var streakLength:Int32 {
           get {
                return builderResult.streakLength
           }
           set (value) {
               builderResult.hasStreakLength = true
               builderResult.streakLength = value
           }
      }
      public func setStreakLength(_ value:Int32) -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        self.streakLength = value
        return self
      }
      public func clearStreakLength() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder{
           builderResult.hasStreakLength = false
           builderResult.streakLength = Int32(0)
           return self
      }
      public var hasBonusMultiplier:Bool {
           get {
                return builderResult.hasBonusMultiplier
           }
      }
      public var bonusMultiplier:Float {
           get {
                return builderResult.bonusMultiplier
           }
           set (value) {
               builderResult.hasBonusMultiplier = true
               builderResult.bonusMultiplier = value
           }
      }
      public func setBonusMultiplier(_ value:Float) -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        self.bonusMultiplier = value
        return self
      }
      public func clearBonusMultiplier() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder{
           builderResult.hasBonusMultiplier = false
           builderResult.bonusMultiplier = Float(0)
           return self
      }
      public var hasStreakBonusMultiplier:Bool {
           get {
                return builderResult.hasStreakBonusMultiplier
           }
      }
      public var streakBonusMultiplier:Float {
           get {
                return builderResult.streakBonusMultiplier
           }
           set (value) {
               builderResult.hasStreakBonusMultiplier = true
               builderResult.streakBonusMultiplier = value
           }
      }
      public func setStreakBonusMultiplier(_ value:Float) -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        self.streakBonusMultiplier = value
        return self
      }
      public func clearStreakBonusMultiplier() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder{
           builderResult.hasStreakBonusMultiplier = false
           builderResult.streakBonusMultiplier = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.Quest.DailyQuestSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
        let returnMe:Pogoprotos.Settings.Master.Quest.DailyQuestSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.Quest.DailyQuestSettings) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        if other == Pogoprotos.Settings.Master.Quest.DailyQuestSettings() {
         return self
        }
        if other.hasBucketsPerDay {
             bucketsPerDay = other.bucketsPerDay
        }
        if other.hasStreakLength {
             streakLength = other.streakLength
        }
        if other.hasBonusMultiplier {
             bonusMultiplier = other.bonusMultiplier
        }
        if other.hasStreakBonusMultiplier {
             streakBonusMultiplier = other.streakBonusMultiplier
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            bucketsPerDay = try codedInputStream.readInt32()

          case 16:
            streakLength = try codedInputStream.readInt32()

          case 29:
            bonusMultiplier = try codedInputStream.readFloat()

          case 37:
            streakBonusMultiplier = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder()
        if let jsonValueBucketsPerDay = jsonMap["bucketsPerDay"] as? NSNumber {
          resultDecodedBuilder.bucketsPerDay = jsonValueBucketsPerDay.int32Value
        }
        if let jsonValueStreakLength = jsonMap["streakLength"] as? NSNumber {
          resultDecodedBuilder.streakLength = jsonValueStreakLength.int32Value
        }
        if let jsonValueBonusMultiplier = jsonMap["bonusMultiplier"] as? NSNumber {
          resultDecodedBuilder.bonusMultiplier = jsonValueBonusMultiplier.floatValue
        }
        if let jsonValueStreakBonusMultiplier = jsonMap["streakBonusMultiplier"] as? NSNumber {
          resultDecodedBuilder.streakBonusMultiplier = jsonValueStreakBonusMultiplier.floatValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Settings.Master.Quest.DailyQuestSettings: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Quest.DailyQuestSettings> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Quest.DailyQuestSettings>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings? {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Quest.PogoprotosSettingsMasterQuestRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Quest.DailyQuestSettings {
    return try Pogoprotos.Settings.Master.Quest.DailyQuestSettings.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
